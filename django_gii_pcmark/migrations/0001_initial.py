# Generated by Django 2.2 on 2019-06-21 19:15

from django.db import migrations, models
import django.db.models.deletion
import django_gii_pcmark.models.hardware


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AudioCodec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Аудио кодек',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('frequency', models.PositiveIntegerField()),
                ('frequency_max', models.PositiveIntegerField()),
                ('cores_count', models.PositiveSmallIntegerField()),
                ('threads_count', models.PositiveSmallIntegerField()),
                ('official_url', models.URLField(null=True)),
            ],
            options={
                'verbose_name_plural': 'Процессоры',
            },
        ),
        migrations.CreateModel(
            name='CPUFan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Процессор, охлаждение',
            },
        ),
        migrations.CreateModel(
            name='CPUGpu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('frequence_baze', models.PositiveIntegerField()),
                ('frequence_max', models.PositiveIntegerField()),
                ('core_count', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Процессор, видеочипсет',
            },
        ),
        migrations.CreateModel(
            name='DDRVersionDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: версии ddr',
            },
        ),
        migrations.CreateModel(
            name='DXVersionsDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: версии directx',
            },
        ),
        migrations.CreateModel(
            name='FanSizesDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.PositiveIntegerField(unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: охлаждение, размеры вентилятора',
            },
        ),
        migrations.CreateModel(
            name='FilesCT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=django_gii_pcmark.models.hardware.upload_to)),
                ('object_id', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('cores', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Процессоры графические',
            },
        ),
        migrations.CreateModel(
            name='GPUDriversDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Справочник: драйвер видеокарты',
            },
        ),
        migrations.CreateModel(
            name='HDD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Диски HDD',
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('val_min', models.PositiveIntegerField()),
                ('val_max', models.PositiveIntegerField()),
                ('val_avg', models.PositiveIntegerField()),
                ('val_dimension', models.CharField(max_length=10)),
                ('overclock_cpu_freq', models.PositiveIntegerField(blank=True, null=True)),
                ('overclock_gpu_core_freq', models.PositiveIntegerField(blank=True, null=True)),
                ('overclock_gpu_ram_freq', models.PositiveIntegerField(blank=True, null=True)),
                ('overclock_ram_freq', models.PositiveIntegerField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('url', models.URLField()),
            ],
            options={
                'verbose_name_plural': 'Тесты систем',
            },
        ),
        migrations.CreateModel(
            name='MBChipsets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Материнские платы, чипсеты',
            },
        ),
        migrations.CreateModel(
            name='MBFormFactorDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_factor', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: материнская плата, форм фактор',
            },
        ),
        migrations.CreateModel(
            name='MBPowerSchemas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main', models.PositiveSmallIntegerField()),
                ('slave', models.PositiveSmallIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Справочник: схема питания материнских плат',
            },
        ),
        migrations.CreateModel(
            name='MotherBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('hdmi_count', models.PositiveSmallIntegerField(default=0)),
                ('dvi_count', models.PositiveSmallIntegerField(default=0)),
                ('vga_count', models.PositiveSmallIntegerField(default=0)),
                ('sata3_count', models.PositiveSmallIntegerField(default=0)),
                ('m2_count', models.PositiveSmallIntegerField(default=0)),
                ('ddr_count', models.PositiveSmallIntegerField(default=0)),
                ('official_url', models.URLField(null=True)),
                ('height', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Материнские платы',
            },
        ),
        migrations.CreateModel(
            name='OSDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: операционные системы',
            },
        ),
        migrations.CreateModel(
            name='PowersDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power', models.PositiveIntegerField(unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: мощности',
            },
        ),
        migrations.CreateModel(
            name='PowerSupply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Блоки питания',
            },
        ),
        migrations.CreateModel(
            name='ProcessorSeriesDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: процессор серия',
            },
        ),
        migrations.CreateModel(
            name='ProducersDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: производители',
            },
        ),
        migrations.CreateModel(
            name='Ram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('official_url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Оперативная память',
            },
        ),
        migrations.CreateModel(
            name='RamBitDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bit', models.PositiveIntegerField(unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: память, битность',
            },
        ),
        migrations.CreateModel(
            name='RamSizeDicts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.PositiveIntegerField()),
                ('dimension', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Справочник: память размеры',
            },
        ),
        migrations.CreateModel(
            name='RamSpeedRatingDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.CharField(max_length=20)),
                ('frequence', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Справочник: память, рейтинг по частоте',
            },
        ),
        migrations.CreateModel(
            name='SocketsDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: процессор сокет',
            },
        ),
        migrations.CreateModel(
            name='SSD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Диски SSD',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram_count', models.PositiveSmallIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Система',
            },
        ),
        migrations.CreateModel(
            name='TestScreenSizeDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('width', models.PositiveIntegerField()),
                ('height', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Справочник: тестовые разрешения экранов',
            },
        ),
        migrations.CreateModel(
            name='TestSoftDict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('mode', models.CharField(blank=True, max_length=100, null=True)),
                ('version', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Справочник: тестовая программа',
            },
        ),
        migrations.CreateModel(
            name='VideoCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100)),
                ('official_url', models.URLField(null=True)),
                ('ram_frequency', models.PositiveIntegerField()),
                ('gpu_frequency', models.PositiveIntegerField(default=0)),
                ('hdmi_count', models.PositiveSmallIntegerField(default=0)),
                ('vga_count', models.PositiveSmallIntegerField(default=0)),
                ('dvi_count', models.PositiveSmallIntegerField(default=0)),
                ('display_port_count', models.PositiveSmallIntegerField(default=0)),
                ('usb_c_count', models.PositiveSmallIntegerField(default=0)),
                ('height', models.PositiveSmallIntegerField(default=0, verbose_name='Высота')),
                ('width', models.PositiveIntegerField(default=0, verbose_name='Ширина')),
                ('length', models.PositiveIntegerField(default=0, verbose_name='Длина')),
                ('gpu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.GPU')),
                ('power_schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.MBPowerSchemas')),
                ('producer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict')),
                ('ram_bit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.RamBitDict')),
                ('ram_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.RamSizeDicts')),
                ('ram_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.DDRVersionDict')),
            ],
            options={
                'verbose_name_plural': 'Видеокарты',
            },
        ),
        migrations.AddConstraint(
            model_name='testsoftdict',
            constraint=models.UniqueConstraint(fields=('name', 'mode', 'version'), name='test_soft_name_mode_version_uniq'),
        ),
        migrations.AddConstraint(
            model_name='testscreensizedict',
            constraint=models.UniqueConstraint(fields=('width', 'height'), name='test_screen_size_width_height_uniq'),
        ),
        migrations.AddField(
            model_name='system',
            name='cpu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.CPU'),
        ),
        migrations.AddField(
            model_name='system',
            name='cpu_fan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.CPUFan'),
        ),
        migrations.AddField(
            model_name='system',
            name='hdd',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.HDD'),
        ),
        migrations.AddField(
            model_name='system',
            name='mother_board',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.MotherBoard'),
        ),
        migrations.AddField(
            model_name='system',
            name='power_supply',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.PowerSupply'),
        ),
        migrations.AddField(
            model_name='system',
            name='ram',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.Ram'),
        ),
        migrations.AddField(
            model_name='system',
            name='ssd',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.SSD'),
        ),
        migrations.AddField(
            model_name='system',
            name='video_card',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.VideoCard'),
        ),
        migrations.AddField(
            model_name='ssd',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='ssd',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddConstraint(
            model_name='ramsizedicts',
            constraint=models.UniqueConstraint(fields=('size', 'dimension'), name='size_dimension_uniq'),
        ),
        migrations.AddField(
            model_name='ram',
            name='ddr_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.DDRVersionDict'),
        ),
        migrations.AddField(
            model_name='ram',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='ram',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddField(
            model_name='ram',
            name='speed_rating',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.RamSpeedRatingDict'),
        ),
        migrations.AddField(
            model_name='powersupply',
            name='fan_size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.FanSizesDict'),
        ),
        migrations.AddField(
            model_name='powersupply',
            name='power',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.PowersDict'),
        ),
        migrations.AddField(
            model_name='powersupply',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='audio_codec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.AudioCodec'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='chipset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.MBChipsets'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='ddr_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.DDRVersionDict'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='form_factor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.MBFormFactorDict'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='power_schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.MBPowerSchemas'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='motherboard',
            name='socket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.SocketsDict'),
        ),
        migrations.AddField(
            model_name='mbchipsets',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='mark',
            name='directx_version',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.DXVersionsDict'),
        ),
        migrations.AddField(
            model_name='mark',
            name='gpu_driver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.GPUDriversDict'),
        ),
        migrations.AddField(
            model_name='mark',
            name='os',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.OSDict'),
        ),
        migrations.AddField(
            model_name='mark',
            name='screen_size',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.TestScreenSizeDict'),
        ),
        migrations.AddField(
            model_name='mark',
            name='system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.System'),
        ),
        migrations.AddField(
            model_name='mark',
            name='test_soft',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.TestSoftDict'),
        ),
        migrations.AddField(
            model_name='hdd',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='hdd',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddConstraint(
            model_name='gpudriversdict',
            constraint=models.UniqueConstraint(fields=('name', 'version'), name='gpu_driver_name_version_uniq'),
        ),
        migrations.AddField(
            model_name='gpu',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='filesct',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='cpugpu',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='cpufan',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='cache',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cache', to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='cache1_lvl',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cache1_lvl', to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='cache2_lvl',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cache2_lvl', to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='cache3_lvl',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cache3_lvl', to='django_gii_pcmark.RamSizeDicts'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='gpu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.CPUGpu'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProcessorSeriesDict'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='socket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.SocketsDict'),
        ),
        migrations.AddField(
            model_name='audiocodec',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_gii_pcmark.ProducersDict'),
        ),
        migrations.AddConstraint(
            model_name='videocard',
            constraint=models.UniqueConstraint(fields=('producer', 'model', 'gpu', 'ram_version', 'ram_size'), name='vc_producer_model_gpu_ram_version_ram_size_uniq'),
        ),
        migrations.AddConstraint(
            model_name='system',
            constraint=models.UniqueConstraint(fields=('mother_board', 'cpu', 'ram', 'ram_count', 'video_card', 'ssd', 'hdd'), name='system_uniq'),
        ),
        migrations.AddConstraint(
            model_name='ssd',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='ssd_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='ram',
            constraint=models.UniqueConstraint(fields=('producer', 'model', 'ddr_version', 'size'), name='ram_producer_model_ddr_version_size_uniq'),
        ),
        migrations.AddConstraint(
            model_name='powersupply',
            constraint=models.UniqueConstraint(fields=('producer', 'model', 'power'), name='ps_producer_model_power_uniq'),
        ),
        migrations.AddConstraint(
            model_name='motherboard',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='mb_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='mbchipsets',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='mb_chipset_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='mark',
            constraint=models.UniqueConstraint(fields=('system', 'test_soft', 'screen_size'), name='mark_uniq'),
        ),
        migrations.AddConstraint(
            model_name='hdd',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='hdd_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='gpu',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='gpu_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='cpugpu',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='cpu_gpu_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='cpufan',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='cpu_fan_producer_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='cpu',
            constraint=models.UniqueConstraint(fields=('producer', 'series', 'model'), name='cpu_producer_series_model_uniq'),
        ),
        migrations.AddConstraint(
            model_name='audiocodec',
            constraint=models.UniqueConstraint(fields=('producer', 'model'), name='audio_producer_model_uniq'),
        ),
    ]
